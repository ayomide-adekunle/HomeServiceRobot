#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <unistd.h>

// Define a client for to send goal requests to the move_base server through a SimpleActionClient
typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

void moveToGoal(float x, float orientation){
  move_base_msgs::MoveBaseGoal goal;

  // set up the frame parameters
  goal.target_pose.header.frame_id = "map";
  goal.target_pose.header.stamp = ros::Time::now();
  
  // Define a position and orientation for the robot to reach
  goal.target_pose.pose.position.x = x;
  goal.target_pose.pose.orientation.w = orientation;
  
  

  
  
}

int main(int argc, char** argv){
  // Initialize the simple_navigation_goals node
  ros::init(argc, argv, "pick_objects");
  

  //tell the action client that we want to spin a thread by default
  MoveBaseClient ac("move_base", true);

  // Wait 5 sec for move_base action server to come up
  while(!ac.waitForServer(ros::Duration(5.0))){
    ROS_INFO("Waiting for the move_base action server to come up");
  }

  //move_base_msgs::MoveBaseGoal goal;

  // set up the frame parameters
  //goal.target_pose.header.frame_id = "map";
  //goal.target_pose.header.stamp = ros::Time::now();

  // Define a position and orientation for the robot to reach
  //goal.target_pose.pose.position.x = 1.0;
  //goal.target_pose.pose.orientation.w = 1.0;
  float pick_up_x = 1.0, pick_up_orientation = 1.0;
  float dropf_off_x = 2.0, drop_off_orientation = 2.0; 
  
  moveToGoal( pick_up_x, pick_up_orientation);
  // Wait an infinite time for the results
  ac.waitForResult();
  
  if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED){
    ROS_INFO("Hooray, reached pick up");
    while(!ac.waitForServer(ros::Duration(5.0))){
      ROS_INFO("Waiting for the move_base action server to come up");
  	}
    moveToGoal( dropf_off_x,  drop_off_orientation);
    // Wait an infinite time for the results
    ac.waitForResult();
    if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED){
      ROS_INFO("Hooray, dropoff successful");
    }
    else{
       ROS_INFO("Falied to droppoff");
    }
    
    
  }
  else{
    ROS_INFO("Falied to pickup");
  }
  
  
    
//   if (result == true){
//     ROS_INFO("Hooray, reached pick up");
//     while(!ac.waitForServer(ros::Duration(5.0))){
//       ROS_INFO("Waiting for the move_base action server to come up");
//   	}
    
//     result = moveToGoal( dropf_off_x,  drop_off_orientation);
    
//     if (result == true){
//       ROS_INFO("Hooray, dropoff successful");
//     }
//     else{
//       ROS_INFO("Falied to droppoff");
//     }
    
//   }
  
//   else{
//     ROS_INFO("Falied to move to pickup location");
//   }

   // Send the goal position and orientation for the robot to reach
  //ROS_INFO("Sending goal");
  //ac.sendGoal(goal);

  // Wait an infinite time for the results
  //ac.waitForResult();

  // Check if the robot reached its goal
//   if(ac.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
//     ROS_INFO("Hooray, the base moved 1 meter forward");
//     sleep(5);//wait for 5secs before heading to drop off
//   else
//     ROS_INFO("The base failed to move forward 1 meter for some reason");
  return 0;
}